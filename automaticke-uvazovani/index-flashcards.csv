"Pozorování";"pozorováním lze získat omezené znalosti týkající se objektů v našem dosahu.";"automaticke-uvazovani uvod"
"Uvažování";"Konstruování (neintuitivních) závěrů z daných předpokladů. Cílem uvažování je odvodit znalost, kterou nemůžeme (nebo nechceme) získat pozorováním. Uvažování je smysluplné (korektní), pokud jím získané závěry jsou pravdivé.";"automaticke-uvazovani uvod"
"Logika";"Matematický obor zkoumající exaktní postupy uvažování.";"automaticke-uvazovani uvod"
"Syntaxe";"Syntaxe logiky je ta část logiky, která se zabývá formální popisem logického jazyka, aniž by mu přiřazovala význam či zkoumala pravdivost.";"automaticke-uvazovani uvod"
"Sémantika";"je ta část logiky, která se zabývá přiřazováním významu symbolům a dalším konstrukcím jazyka logiky.";"automaticke-uvazovani uvod"
"Korektnost";"Uvažování (v logice i jinde) přináší prospěch jen pokud jeho výsledky jsou pravdivá tvrzení. Takovému uvažování (takovým deduktivním pravidlům) říkáme korektní.";"automaticke-uvazovani uvod"
"nekonzistentní systémy";"systémy, v nichž lze dokázat nepravdivá tvrzení.";"automaticke-uvazovani uvod"
"neúplné systémy";"systémy ve kterých nelze dokázat to, co potřebujeme.";"automaticke-uvazovani uvod"
"Russelův paradox";"Pokud použijeme neformální definici množiny: Všechny objekty s danou vlastnosti tvoří množinu.";"automaticke-uvazovani uvod"
"Gödelova věta";"ne všechna pravdivá tvrzení lze formálně dokázat.";"automaticke-uvazovani uvod"
"Algoritmus Britského muzea";"každé dokazatelné tvrzení lze dokázat strojově. Pomocí odvozovacích pravidel postupně generujeme důkazy všech pravdivých tvrzení. Jistě takto jednou najdeme i důkaz tvrzení, které chceme dokázat. Obecně ale nelze každé dokazatelné tvrzení dokázat efektivně.";"automaticke-uvazovani uvod"
"Automatické uvažování";"zkratka ATP (automated theorem proving). Rozdělení: Hledání modelů (model finding), Kontrola modelů.";"automaticke-uvazovani uvod"
"Automatické dokazování";"Cílem je počítačem z dané množiny předpokladů logicky odvodit platnost daného závěru. Výsledkem je: důkaz závěru z předpokladů (nebo jen konstatování, že je tvrzení dokazatelné). Nebo konstatování, že tvrzení je nedokazatelné (pouze někdy!). Nebo není schopen systém rozhodnout v rámci daných omezení (čas, paměť, ...).";"automaticke-uvazovani uvod"
"Kontrola modelů";"Formálně: zkoumáme, zda platí tvrzení v dané interpretaci – v rámci daného přiřazení významu logického jazyka.";"automaticke-uvazovani uvod"
"Hledání modelů";"Formálně: hledáme model množiny formulí.";"automaticke-uvazovani uvod"
"Interaktivní systémy";"pracují v menších krocích. Operátor systému „napovídá“, jaké taktiky má zkoušet a směruje ho tak k cíli.";"automaticke-uvazovani uvod"
"Automatické systémy";"se snaží zcela samostatně vyřešit úlohu.";"automaticke-uvazovani uvod"
"Interpretace";"Interpretace M je zobrazení, které přiřazuje každé výrokové proměnné význam – nepravda nebo pravda, nebo jako hodnoty 0 nebo 1.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Model";"Jestliže je formule φ pravdivá v dané interpretaci M, říkáme, že M je model φ, značíme: M |= φ. Říkáme též, že M splňuje φ.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Sémantický důsledek";"Jestliže ψ platí ve všech interpretacích, ve kterých platí φ, říkáme, že ψ je sémantický důsledek φ. Značení: φ ⊨ ψ";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Tautologie";"Jestliže formule φ platí ve všech interpretacích, nazýváme jí tautologie. Značení: ⊨ φ";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Kontradikce";"Jestliže formule ψ není splněná v žádné interpretaci, nazveme jí kontradikce, nebo sporná formule.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Sporná množina";"Množinu formulí, která není splněná v žádné interpretaci, nazveme spornou množinou.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Logický kalkulus";"Mechanismus, které umožňují zjistit (odvodit) pravdivost formule syntaktickými prostředky, tedy pouze prací se symboly, kterými jsou formule zapsány. Každý logický kalkulus se skládá z:<br>*jazyka*, ve kterém se zapisují jeho formule;<br>*axiomů*, což jsou formule, jejichž platnost v daném kalulu implicitně předpokládáme;<br>*odvozovacích pravidel*, která říkají, jaké formule můžeme odvodit z axiomů, nebo z jiných již odvozených formulí.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Důkaz";"Důkaz v daném logickém kalkulu je taková konečná posloupnost formulí, kde každá formule je buďto:<br>*jeden z axiomů*, nebo<br>*odvozená* pomocí některého logického pravidla kalkulu z předcházejících formulí v posloupnosti.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Dokazatelnost";"Řekneme, že formule ψ je dokazatelná z množiny formulí A, pokud existuje důkaz ψ z A. Značení: A ⊦ ψ.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Hilbertův implikativní kalkulus pro výrokovou logiku";"má odvozovací pravidlo modus ponens.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Korektnost logického kalkulu";"Logický kalkulus je korektní, jestliže platí: všechny axiomy jsou tautologie, a pokud z formulí φ1,...,φn odvodíme ψ, musí platit φ,...,φ⊨ ψ. Čili, vše, co je dokazatelné, je pravda.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Úplnost logického kalkulu";"Vše, co je pravda, je dokazatelné.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Rezoluční kalkulus";"Rezoluční kalkulus umožňuje dokázat, že je daná množina tzv. klauzulí sporná, tedy zda v žádné interpretaci nelze splnit všechny dané formule. Úlohu je tedy nejprve nutné převést na hledání důkazu sporu z nějaké množiny klauzulí.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Literál";"je výroková proměnná nebo její negace.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Klauzule";"je disjunkce libovolného počtu literálů.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Prázdná klauzule";"je klauzule, která neobsahuje žádný literál. Tato je ekvivalentní (každé) kontradikci. Značení , někdy též ⊥ nebo {}.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Věta (o úplnosti rezolučního kalkulu)";"Buď A sporná množina klauzulí. Pak lze rezolučním kalkulem odvodit prázdnou klauzuli (spor).";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Metoda důkazu sporem";"Věta: A ⊨ φ právě když A∪{¬φ} ⊨  (jinak řečeno, A∪{¬φ} je sporná množina formulí).";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Strategie aplikace rezolučního pravidla";"<br>";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Optimalizace konverze na CNF";"<br>";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Subsumpce";"Jestliže φ⊆ψ ve smyslu množin literálů, říkáme, že formule φ subsumuje formuli ψ. Značme φ ⊑ ψ.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Subsumpce v rezoluci";"Pokud existuje rezoluční důkaz sporu z B a platí-li A ⊑ B, pak: <br>- existuje rezoluční důkaz sporu z A;<br>- ten lze mechanicky sestrojit, a<br>- není delší než důkaz z B.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Dopředná subsumpce";"Vždy ponecháváme subsumující klauzuli (tu s méně literály, vlevo od ⊑ )";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Zpětná subsumpce";"zahazujeme subsumovanou klauzuli (tu s více literály, vpravo od ⊑ ).";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Uspořádaná rezoluce";"Myšlenka: Abychom dospěli k prázdné klauzuli, musíme z nějaké klauzule odstranit postupně všechny literály.<br>Nezávisí na pořadí, v jakém literály odstraňujeme.<br>Tím, že nějaké pořadí zvolíme, omezíme množství odvozených klauzulí.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Kvaziuspořádání";"≼ je reflexivní tranzitivní relace.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Lineární uspořádání";"≼ je totální kvaziuspořádání, tedy takové, kde platí, že pro libovolné A a B platí A ≼ B nebo B ≼ A (obecně může platit i obojí najednou).";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Úplnost uspořádané rezoluce";"Věta: Z každé sporné množiny klauzulí S lze uspořádanou rezolucí odvodit spor.";"automaticke-uvazovani rezolucni-kalkulus-pro-vyrokovou-logiku"
"Tableau metoda";"se užívaná pro automatické dokazování vět v predikátové logice, ale i<br>v dalších (modálních, temporálních, aj.) logikách.<br>Sémantické tableau je strom, kde každý uzel je logická<br>formule.<br>Sémantické tableau vzniká iterativně z předchozích<br>tableaux postupnou aplikací určitých pravidel.<br>Dokazování pomocí tableau metody postupně rozděluje<br>vstupní formuli na menší formule, dokud na všech větvích<br>stromu nenajde komplementární páry formulí nebo pokud<br>už nemůže aplikovat žádné z pravidel.<br>Vstupem pro tableau metodu bude množina formulí<br>predikátové logiky.<br>Cílem metody bude, tak jako v případě rezoluční metody,<br>najít spor v této množině.";"automaticke-uvazovani tableaux-metody"
"Negation normal form";"Formule v negativní normální formě (NNF) je taková logická formule, která obsahuje negaci pouze v literálech.";"automaticke-uvazovani tableaux-metody"
"konjuknce";"A & B -> připojíme větev s A a B";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"disjunkce";"A | B -> vytvoříme jednu větev s A a druhou s B";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"negace";"převedení negace blíže k literálům. Pokud budeme zpracovávat pomocí tableau metody pouze formule v tzv. negativní normální formě (NNF), není třeba žádné pravidlo pro zpracování negace zavádět.";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"univerzální kvantifikace";"nahrazením všech volných výskytů proměnné x za novou proměnnou x’, která se ještě nikde v tableau nevyskytuje.";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"existenční kvantifikace";"nahrazením všech volných výskytů x termem f(x1 ,…,xn). Zde f je nový funkční symbol, který se ještě nikde v tableau nevyskytuje.";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"uzavření větve";"pokud se na některé větvi v tableau vyskytují dva komplementární literály co dávají po unifikační substituci spor, potom aplikujeme substituci θ na všechny uzly tableau a takovou větev označíme za uzavřenou.";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"uzavřené tableau";"Tableau je uzavřené, pokud jsou všechny jeho větve uzavřené.";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"LeanTAP";"LeanTAP je jeden z nejkratších úplných dokazovačů pro predikátovou logiku. LeanTAP používá tableau metodu a skládá se z pěti klauzulí v programovacím jazyku Prolog. Jako vstup přepokládá dokazovač konjunkci skolemizovaných uzavřených formulí v NNF.";"automaticke-uvazovani tableaux-metody tableau-pravidla-pro-predikatovou-logiku"
"SAT";"Boolean SATisfiability problem. Řeší problém nalezení ohodnocení proměnných v booleovské formuli bez kvantifikátorů tak, že je formule splněna.";"automaticke-uvazovani dpll-a-metody-pro-sat"
"DPLL";"Davis-Putnam-Logemann-Loveland algoritmus pro řešení SAT. The basic backtracking algorithm runs by choosing a literal, assigning a truth value to it, simplifying the formula and then recursively checking if the simplified formula is satisfiable. The DPLL algorithm enhances over the backtracking algorithm by the eager use of the following rules at each step: unit propagation and pure literal elimination.";"automaticke-uvazovani dpll-a-metody-pro-sat"
"unit clause";"je klausule která obsahuje právě jeden literál. Tento literál obsahuje nenastavenou proměnnou.";"automaticke-uvazovani dpll-a-metody-pro-sat"
"unit propagation";"If a clause is a unit clause, i.e. it contains only a single unassigned literal, this clause can only be satisfied by assigning the necessary value to make this literal true. Thus, no choice is necessary. In practice, this often leads to deterministic cascades of units, thus avoiding a large part of the naive search space.";"automaticke-uvazovani dpll-a-metody-pro-sat"
"pure výskyt";"znamená, že se literál všude ve Φ vyskytuje buď ve tvaru x anebo se všude ve Φ vyskytuje ve tvaru ¬x.";"automaticke-uvazovani dpll-a-metody-pro-sat"
"pure literal elimination";"If a propositional variable occurs with only one polarity in the formula, it is called pure. Pure literals can always be assigned in a way that makes all clauses containing them true. Thus, these clauses do not constrain the search anymore and can be deleted.";"automaticke-uvazovani dpll-a-metody-pro-sat"
"MiniSat";"velmi výkonný SAT solver";"automaticke-uvazovani dpll-a-metody-pro-sat"
"MiniSat – analýza konfliktu";"Konflikt nastane pokud se nějaká klauzule stane nesplnitelnou během propagace unit klauzule (boolean_constraint_propagation()).";"automaticke-uvazovani dpll-a-metody-pro-sat"