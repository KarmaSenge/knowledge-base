{"pozorovani":{"name":"Pozorování","headers":["Automatické uvažování","Úvod"],"definition":"pozorováním lze získat omezené znalosti týkající se objektů v našem dosahu.","example":"Pozorováním mohu získat znalost: \"Pes, kterého vidím, má čtyři nohy.\" Ale nemohu pozorováním zjisit platnost tvrzení: \"Všichni psi mají nejvýše čtyři nohy.\" Protože není v mých silách prozkoumat všechny psy na světě.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#4","id":"pozorovani"},"uvazovani":{"name":"Uvažování","headers":["Automatické uvažování","Úvod"],"definition":"Konstruování (neintuitivních) závěrů z daných předpokladů. Cílem uvažování je odvodit znalost, kterou nemůžeme (nebo nechceme) získat pozorováním. Uvažování je smysluplné (korektní), pokud jím získané závěry jsou pravdivé.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#5","id":"uvazovani"},"logika":{"name":"Logika","headers":["Automatické uvažování","Úvod"],"definition":"Matematický obor zkoumající exaktní postupy uvažování.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#7","id":"logika"},"syntaxe":{"name":"Syntaxe","headers":["Automatické uvažování","Úvod"],"definition":"Syntaxe logiky je ta část logiky, která se zabývá formální popisem logického jazyka, aniž by mu přiřazovala význam či zkoumala pravdivost.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#8","id":"syntaxe"},"semantika":{"name":"Sémantika","headers":["Automatické uvažování","Úvod"],"definition":"je ta část logiky, která se zabývá přiřazováním významu symbolům a dalším konstrukcím jazyka logiky.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#9","id":"semantika"},"korektnost":{"name":"Korektnost","headers":["Automatické uvažování","Úvod"],"definition":"Uvažování (v logice i jinde) přináší prospěch jen pokud jeho výsledky jsou pravdivá tvrzení. Takovému uvažování (takovým deduktivním pravidlům) říkáme korektní.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#12","id":"korektnost"},"nekonzistentni-systemy":{"name":"nekonzistentní systémy","headers":["Automatické uvažování","Úvod"],"definition":"systémy, v nichž lze dokázat nepravdivá tvrzení.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#13","id":"nekonzistentni-systemy"},"neuplne-systemy":{"name":"neúplné systémy","headers":["Automatické uvažování","Úvod"],"definition":"systémy ve kterých nelze dokázat to, co potřebujeme.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#13","id":"neuplne-systemy"},"russeluv-paradox":{"name":"Russelův paradox","headers":["Automatické uvažování","Úvod"],"definition":"Pokud použijeme neformální definici množiny: Všechny objekty s danou vlastnosti tvoří množinu.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#14","id":"russeluv-paradox"},"godelova-veta":{"name":"Gödelova věta","headers":["Automatické uvažování","Úvod"],"definition":"ne všechna pravdivá tvrzení lze formálně dokázat.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#15","id":"godelova-veta"},"algoritmus-britskeho-muzea":{"name":"Algoritmus Britského muzea","headers":["Automatické uvažování","Úvod"],"definition":"každé dokazatelné tvrzení lze dokázat strojově. Pomocí odvozovacích pravidel postupně generujeme důkazy všech pravdivých tvrzení. Jistě takto jednou najdeme i důkaz tvrzení, které chceme dokázat. Obecně ale nelze každé dokazatelné tvrzení dokázat efektivně.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#17","id":"algoritmus-britskeho-muzea"},"automaticke-uvazovani":{"name":"Automatické uvažování","headers":["Automatické uvažování","Úvod"],"definition":"zkratka ATP (automated theorem proving). Rozdělení: Hledání modelů (model finding), Kontrola modelů.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#21","id":"automaticke-uvazovani"},"automaticke-dokazovani":{"name":"Automatické dokazování","headers":["Automatické uvažování","Úvod"],"definition":"Cílem je počítačem z dané množiny předpokladů logicky odvodit platnost daného závěru. Výsledkem je: důkaz závěru z předpokladů (nebo jen konstatování, že je tvrzení dokazatelné). Nebo konstatování, že tvrzení je nedokazatelné (pouze někdy!). Nebo není schopen systém rozhodnout v rámci daných omezení (čas, paměť, ...).","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#22","id":"automaticke-dokazovani"},"kontrola-modelu":{"name":"Kontrola modelů","headers":["Automatické uvažování","Úvod"],"definition":"Formálně: zkoumáme, zda platí tvrzení v dané interpretaci – v rámci daného přiřazení významu logického jazyka.","note":"Nezkoumáme obecnou platnost tvrzení, jen v rámci konkrétní struktury. Typicky používáme při verifikaci vlastností systémů s konečně mnoha stavy.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#24","id":"kontrola-modelu"},"hledani-modelu":{"name":"Hledání modelů","headers":["Automatické uvažování","Úvod"],"definition":"Formálně: hledáme model množiny formulí.","note":"Hledáme jednu konkrétní strukturu a k ní interpretaci daného logického jazyka tak, aby v této interpretaci platila všechna tvrzení z dané množiny. Používáme obvykle pro nalezení protipříkladu, tedy když chceme ukázat, že dané tvrzení není dokazatelné z dané množiny předpokladů.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#25","id":"hledani-modelu"},"interaktivni-systemy":{"name":"Interaktivní systémy","headers":["Automatické uvažování","Úvod"],"definition":"pracují v menších krocích. Operátor systému „napovídá“, jaké taktiky má zkoušet a směruje ho tak k cíli.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#26","id":"interaktivni-systemy"},"automaticke-systemy":{"name":"Automatické systémy","headers":["Automatické uvažování","Úvod"],"definition":"se snaží zcela samostatně vyřešit úlohu.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/01-uvod.pdf#26","id":"automaticke-systemy"},"interpretace":{"name":"Interpretace","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Interpretace M je zobrazení, které přiřazuje každé výrokové proměnné význam – nepravda nebo pravda, nebo jako hodnoty 0 nebo 1.","note":"V rámci dané interpretace pak můžeme dosadit za proměnné dané formule φ a vyčíslit její pravdivost podle známých pravidel.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#4","id":"interpretace"},"model":{"name":"Model","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Jestliže je formule φ pravdivá v dané interpretaci M, říkáme, že M je model φ, značíme: M |= φ. Říkáme též, že M splňuje φ.","symbol":"|=","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#4","id":"model"},"semanticky-dusledek":{"name":"Sémantický důsledek","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Jestliže ψ platí ve všech interpretacích, ve kterých platí φ, říkáme, že ψ je sémantický důsledek φ. Značení: φ ⊨ ψ","symbol":"⊨","note":"Pro množinu formulí A také píšeme A ⊨ φ, pokud φ platí ve všech interpretacích, ve kterých jsou splněny všechny formule z A.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#5","id":"semanticky-dusledek"},"tautologie":{"name":"Tautologie","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Jestliže formule φ platí ve všech interpretacích, nazýváme jí tautologie. Značení: ⊨ φ","symobl":"⊨ φ","example":"⊨ (a | ¬a)","note":"Někdy se též zavádí speciální symbol (nulární logická spojka) pro tautologii „⊤“.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#8","id":"tautologie"},"kontradikce":{"name":"Kontradikce","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Jestliže formule ψ není splněná v žádné interpretaci, nazveme jí kontradikce, nebo sporná formule.","example":"(a & ¬a)","alias":"Spor","note":"Někdy se zavádí pro kontradikci speciální symbol (nulární logická spojka) „⊥“.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#10","id":"kontradikce"},"sporna-mnozina":{"name":"Sporná množina","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Množinu formulí, která není splněná v žádné interpretaci, nazveme spornou množinou.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#10","id":"sporna-mnozina"},"logicky-kalkulus":{"name":"Logický kalkulus","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Mechanismus, které umožňují zjistit (odvodit) pravdivost formule syntaktickými prostředky, tedy pouze prací se symboly, kterými jsou formule zapsány. Každý logický kalkulus se skládá z:<br>*jazyka*, ve kterém se zapisují jeho formule;<br>*axiomů*, což jsou formule, jejichž platnost v daném kalulu implicitně předpokládáme;<br>*odvozovacích pravidel*, která říkají, jaké formule můžeme odvodit z axiomů, nebo z jiných již odvozených formulí.","alias":"Logický deduktivní kalkulus","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#14","id":"logicky-kalkulus"},"dukaz":{"name":"Důkaz","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Důkaz v daném logickém kalkulu je taková konečná posloupnost formulí, kde každá formule je buďto:<br>*jeden z axiomů*, nebo<br>*odvozená* pomocí některého logického pravidla kalkulu z předcházejících formulí v posloupnosti.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#16","id":"dukaz"},"dokazatelnost":{"name":"Dokazatelnost","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Řekneme, že formule ψ je dokazatelná z množiny formulí A, pokud existuje důkaz ψ z A. Značení: A ⊦ ψ.","symbol":"⊦","note":"Pozorování: Každý axiom je triviálně dokazatelný důkazem délky 1.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#17","id":"dokazatelnost"},"hilbertuv-implikativni-kalkulus-pro-vyrokovou-logiku":{"name":"Hilbertův implikativní kalkulus pro výrokovou logiku","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"má odvozovací pravidlo modus ponens.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#18","id":"hilbertuv-implikativni-kalkulus-pro-vyrokovou-logiku"},"korektnost-logickeho-kalkulu":{"name":"Korektnost logického kalkulu","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Logický kalkulus je korektní, jestliže platí: všechny axiomy jsou tautologie, a pokud z formulí φ1,...,φn odvodíme ψ, musí platit φ,...,φ⊨ ψ. Čili, vše, co je dokazatelné, je pravda.","formal":"Logický kalkulus je korektní, jestliže platí: pokud A ⊦ ψ pak A ⊨ ψ.","example":"Hilbertův kalkulus je korektní, protože všechny jeho axiomy jsou tautologie, a pravidlo modus ponens je korektní: φ, φ ⇒ ψ ⊨ ψ (nakreslit tabulku).","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#19","id":"korektnost-logickeho-kalkulu"},"uplnost-logickeho-kalkulu":{"name":"Úplnost logického kalkulu","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Vše, co je pravda, je dokazatelné.","formal":"Logický kalkulus je úplný, jestliže platí: pokud A ⊨ ψ pak A ⊦ ψ.","example":"Hilbertův kalkulus pro výrokovou logiku je úplný.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#20","id":"uplnost-logickeho-kalkulu"},"rezolucni-kalkulus":{"name":"Rezoluční kalkulus","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Rezoluční kalkulus umožňuje dokázat, že je daná množina tzv. klauzulí sporná, tedy zda v žádné interpretaci nelze splnit všechny dané formule. Úlohu je tedy nejprve nutné převést na hledání důkazu sporu z nějaké množiny klauzulí.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/21","id":"rezolucni-kalkulus"},"literal":{"name":"Literál","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"je výroková proměnná nebo její negace.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#23","id":"literal"},"klauzule":{"name":"Klauzule","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"je disjunkce libovolného počtu literálů.","example":"a | b | ~b | c","note":"Klauzule se obvykle uvažují jako množiny symbolů, nikoliv jako posloupnosti.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#23","id":"klauzule"},"prazdna-klauzule":{"name":"Prázdná klauzule","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"je klauzule, která neobsahuje žádný literál. Tato je ekvivalentní (každé) kontradikci. Značení , někdy též ⊥ nebo {}.","symbols":["","⊥","{}"],"source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#23","id":"prazdna-klauzule"},"veta-o-uplnosti-rezolucniho-kalkulu":{"name":"Věta (o úplnosti rezolučního kalkulu)","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Buď A sporná množina klauzulí. Pak lze rezolučním kalkulem odvodit prázdnou klauzuli (spor).","alias":"refutationally complete","type":"theorem","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#29","id":"veta-o-uplnosti-rezolucniho-kalkulu"},"metoda-dukazu-sporem":{"name":"Metoda důkazu sporem","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Věta: A ⊨ φ právě když A∪{¬φ} ⊨  (jinak řečeno, A∪{¬φ} je sporná množina formulí).","note":"Takže chceme-li zkoumat, zda A ⊨ φ, převedeme problém na ekvivalentní problém zkomající, zda A∪{¬φ} je sporná.","type":"theorem","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#31","id":"metoda-dukazu-sporem"},"strategie-aplikace-rezolucniho-pravidla":{"name":"Strategie aplikace rezolučního pravidla","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"<br>","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#35","id":"strategie-aplikace-rezolucniho-pravidla"},"optimalizace-konverze-na-cnf":{"name":"Optimalizace konverze na CNF","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"<br>","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#38","id":"optimalizace-konverze-na-cnf"},"subsumpce":{"name":"Subsumpce","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Jestliže φ⊆ψ ve smyslu množin literálů, říkáme, že formule φ subsumuje formuli ψ. Značme φ ⊑ ψ.","symbol":"⊑","example":"a | ~c ⊑ a | b | ~c | ~d","note":"Tvrzení: Jestliže φ ⊑ ψ pak φ ⊧ ψ. Naopak to neplatí (příklad). Pro množiny klauzulí A a B řekneme, že množina A subsumuje množinu B (zn. A ⊑ B), pokud každou klauzuli z B subsumuje nějaká klauzule z A. Příklad: { a, ~b | ~c } ⊑ { a | d, ~b | ~c | e, a | ~e }","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#39","id":"subsumpce"},"subsumpce-v-rezoluci":{"name":"Subsumpce v rezoluci","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Pokud existuje rezoluční důkaz sporu z B a platí-li A ⊑ B, pak: <br>- existuje rezoluční důkaz sporu z A;<br>- ten lze mechanicky sestrojit, a<br>- není delší než důkaz z B.","note":"Struktura důkazu bude stejná, jen nám „vypadnou“ některé literály a následně ta rezoluční pravidla, ve kterých jsme se těchto literálů předtím „zbavovali“.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#40","id":"subsumpce-v-rezoluci"},"dopredna-subsumpce":{"name":"Dopředná subsumpce","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Vždy ponecháváme subsumující klauzuli (tu s méně literály, vlevo od ⊑ )","alias":"forward","formal":"Pokud odvodíme klauzuli ψ, a ψ je subsumována nějakou z již dříve odvozených klauzulí φ (tedy φ ⊑ ψ), klauzuli ψ zahodíme. (Cokoliv bychom dokázali z ψ můžeme dokázat i z φ.)","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#43","id":"dopredna-subsumpce"},"zpetna-subsumpce":{"name":"Zpětná subsumpce","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"zahazujeme subsumovanou klauzuli (tu s více literály, vpravo od ⊑ ).","alias":"backward","formal":"Pokud odvodíme klauzuli φ, klauzulí φ nahradíme všechny doposud odvozené klauzule ψi, které jsou subsumovány φ (tedy φ ⊑ ψ).","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#43","id":"zpetna-subsumpce"},"usporadana-rezoluce":{"name":"Uspořádaná rezoluce","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Myšlenka: Abychom dospěli k prázdné klauzuli, musíme z nějaké klauzule odstranit postupně všechny literály.<br>Nezávisí na pořadí, v jakém literály odstraňujeme.<br>Tím, že nějaké pořadí zvolíme, omezíme množství odvozených klauzulí.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#46","id":"usporadana-rezoluce"},"kvaziusporadani":{"name":"Kvaziuspořádání","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"≼ je reflexivní tranzitivní relace.","symbol":"≼","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#48","id":"kvaziusporadani"},"linearni-usporadani":{"name":"Lineární uspořádání","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"≼ je totální kvaziuspořádání, tedy takové, kde platí, že pro libovolné A a B platí A ≼ B nebo B ≼ A (obecně může platit i obojí najednou).","note":"V lineárním uspořádání jsou každé dva prvky porovnatelné.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#48","id":"linearni-usporadani"},"uplnost-usporadane-rezoluce":{"name":"Úplnost uspořádané rezoluce","headers":["Automatické uvažování","Rezoluční kalkulus pro výrokovou logiku"],"definition":"Věta: Z každé sporné množiny klauzulí S lze uspořádanou rezolucí odvodit spor.","type":"theorem","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/02-vyrok_rezol.pdf#49","id":"uplnost-usporadane-rezoluce"},"tableau-metoda":{"name":"Tableau metoda","headers":["Automatické uvažování","Tableaux metody"],"definition":"se užívaná pro automatické dokazování vět v predikátové logice, ale i\nv dalších (modálních, temporálních, aj.) logikách.\nSémantické tableau je strom, kde každý uzel je logická\nformule.\nSémantické tableau vzniká iterativně z předchozích\ntableaux postupnou aplikací určitých pravidel.\nDokazování pomocí tableau metody postupně rozděluje\nvstupní formuli na menší formule, dokud na všech větvích\nstromu nenajde komplementární páry formulí nebo pokud\nuž nemůže aplikovat žádné z pravidel.\nVstupem pro tableau metodu bude množina formulí\npredikátové logiky.\nCílem metody bude, tak jako v případě rezoluční metody,\nnajít spor v této množině.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#2","id":"tableau-metoda"},"negation-normal-form":{"name":"Negation normal form","headers":["Automatické uvažování","Tableaux metody"],"definition":"Formule v negativní normální formě (NNF) je taková logická formule, která obsahuje negaci pouze v literálech.","symbol":"NNF","note":"Převod všech formulí na NNF formule se obvykle provádí před zahájením tableau metody.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#10","id":"negation-normal-form"},"konjuknce":{"name":"konjuknce","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"A & B -> připojíme větev s A a B","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#5","id":"konjuknce"},"disjunkce":{"name":"disjunkce","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"A | B -> vytvoříme jednu větev s A a druhou s B","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#8","id":"disjunkce"},"negace":{"name":"negace","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"převedení negace blíže k literálům. Pokud budeme zpracovávat pomocí tableau metody pouze formule v tzv. negativní normální formě (NNF), není třeba žádné pravidlo pro zpracování negace zavádět.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#11","id":"negace"},"univerzalni-kvantifikace":{"name":"univerzální kvantifikace","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"nahrazením všech volných výskytů proměnné x za novou proměnnou x’, která se ještě nikde v tableau nevyskytuje.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#12","id":"univerzalni-kvantifikace"},"existencni-kvantifikace":{"name":"existenční kvantifikace","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"nahrazením všech volných výskytů x termem f(x1 ,…,xn). Zde f je nový funkční symbol, který se ještě nikde v tableau nevyskytuje.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#14","id":"existencni-kvantifikace"},"uzavreni-vetve":{"name":"uzavření větve","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"pokud se na některé větvi v tableau vyskytují dva komplementární literály co dávají po unifikační substituci spor, potom aplikujeme substituci θ na všechny uzly tableau a takovou větev označíme za uzavřenou.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#15","id":"uzavreni-vetve"},"uzavrene-tableau":{"name":"uzavřené tableau","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"Tableau je uzavřené, pokud jsou všechny jeho větve uzavřené.","note":"Takové tableau dosvědčuje spor vstupní množiny formulí, protože všechna tableau pravidla jsou logicky korektní (tedy kořen tabla implikuje každý uzel v tablu) a každá cesta z kořene do listu obsahuje dvojici komplementárních literálů, což představuje spor.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#16","id":"uzavrene-tableau"},"leantap":{"name":"LeanTAP","headers":["Automatické uvažování","Tableaux metody","Tableau pravidla pro predikátovou logiku"],"definition":"LeanTAP je jeden z nejkratších úplných dokazovačů pro predikátovou logiku. LeanTAP používá tableau metodu a skládá se z pěti klauzulí v programovacím jazyku Prolog. Jako vstup přepokládá dokazovač konjunkci skolemizovaných uzavřených formulí v NNF.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/08-tableaux.pdf#18","id":"leantap"},"sat":{"name":"SAT","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"Boolean SATisfiability problem. Řeší problém nalezení ohodnocení proměnných v booleovské formuli bez kvantifikátorů tak, že je formule splněna.","note":"Jinými slovy řešíme problém pravdivosti uzavřené existenčněkvantifikované booleovské formule. Vstupem většiny SAT solverů je CNF (Conjunctive Normal Form). Nalezení řešení SAT je NP-úplný problém (Stephen Cook 1971).","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#2","id":"sat"},"dpll":{"name":"DPLL","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"Davis-Putnam-Logemann-Loveland algoritmus pro řešení SAT. The basic backtracking algorithm runs by choosing a literal, assigning a truth value to it, simplifying the formula and then recursively checking if the simplified formula is satisfiable. The DPLL algorithm enhances over the backtracking algorithm by the eager use of the following rules at each step: unit propagation and pure literal elimination.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#6","id":"dpll"},"unit-clause":{"name":"unit clause","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"je klausule která obsahuje právě jeden literál. Tento literál obsahuje nenastavenou proměnnou.","alias":"jednotková klauzule","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#6","id":"unit-clause"},"unit-propagation":{"name":"unit propagation","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"If a clause is a unit clause, i.e. it contains only a single unassigned literal, this clause can only be satisfied by assigning the necessary value to make this literal true. Thus, no choice is necessary. In practice, this often leads to deterministic cascades of units, thus avoiding a large part of the naive search space.","alias":"unit propagation","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#6","id":"unit-propagation"},"pure-vyskyt":{"name":"pure výskyt","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"znamená, že se literál všude ve Φ vyskytuje buď ve tvaru x anebo se všude ve Φ vyskytuje ve tvaru ¬x.","note":"Jinými slovy literál je pure, pokud se vykytuje v celé Φ právě s jednou polaritou.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#8","id":"pure-vyskyt"},"pure-literal-elimination":{"name":"pure literal elimination","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"If a propositional variable occurs with only one polarity in the formula, it is called pure. Pure literals can always be assigned in a way that makes all clauses containing them true. Thus, these clauses do not constrain the search anymore and can be deleted.","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#8","id":"pure-literal-elimination"},"minisat":{"name":"MiniSat","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"velmi výkonný SAT solver","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#10","id":"minisat"},"minisat-analyza-konfliktu":{"name":"MiniSat – analýza konfliktu","headers":["Automatické uvažování","DPLL a metody pro SAT"],"definition":"Konflikt nastane pokud se nějaká klauzule stane nesplnitelnou během propagace unit klauzule (boolean_constraint_propagation()).","source":"http://cw.felk.cvut.cz/lib/exe/fetch.php/courses/a4m33au/09-dpll.pdf#12","id":"minisat-analyza-konfliktu"}}